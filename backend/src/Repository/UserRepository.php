<?php

namespace App\Repository;

use Doctrine\ORM\Mapping\ClassMetadata;
use Doctrine\ORM\Tools\Pagination\CountWalker;

/**
 * UserRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 *
 * 8fab32b1-d575-405e-bdb7-8ac0cc3cb886    Nando Brasilio    nandobrasilio LEVEL 2
 * 64bb9706-4d5f-4b61-9167-e0ee0bf2c51f    Ernandes Boaventura Bruna    ernandes.boaventura.bruna LEVEL 1
 *
 */
class UserRepository extends BaseRepository
{

    public function findAllQueryBuilder(array $params = [])
    {
        $hasParam = function ($param) use ($params) {
            return isset($params[$param]) && !empty($params[$param]);
        };

        $qb = $this->createQueryBuilder('u');

        if ($hasParam('filter')) {
            $qb
                ->add('join', [
                    'u' => [
                        'joinType' => 'left join',
                        'joinTable' => 'App\Entity\UserPriority',
                        'joinAlias' => 'p',
                        'joinCondition' => 'WITH p.uuid = u.uuid'
                    ]
                ])
                ->where('MATCH_AGAINST(u.name, u.username, :filter) > 0.8')
                ->setParameter('filter', $params['filter'])
                ->orderBy('IFNULL(p.level, 3)', 'asc');
        }

        $cacheId = 'Activity_';
        if (count($params) > 0) {
            foreach ($params as $param) {
                $cacheId .= serialize($param);
            }
        }
        $cacheId = md5($cacheId);

        return $qb
            ->getQuery()
            ->setHint(CountWalker::HINT_DISTINCT, false)
            ->setCacheable(true)
            ->useQueryCache(true)
            ->useResultCache(true, 86400, $cacheId)
            ->setCacheMode(ClassMetadata::CACHE_USAGE_READ_ONLY)
            ->setCacheRegion('region_users');
    }
}
