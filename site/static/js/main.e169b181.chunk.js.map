{"version":3,"sources":["Header.js","InputText.js","SearchBox.js","Auth.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","db","n","dbStatusColor","dbStatus","dbStatusStyle","color","fontWeigth","react_default","a","createElement","className","style","Component","InputText","htmlFor","type","id","value","onChange","handleInput","onKeyDown","handleEnter","placeholder","label","SearchBox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","field","nResults","results","pag","doingSearch","handleField","bind","assertThisInitialized","handleButton","handlePagButton","handleInputEnter","event","setState","target","_this2","search","_this3","keyword","from","requestUri","serverURI","length","fetch","crossDomain","method","headers","Content-type","Accept","Authorization","token","then","response","json","reponseJson","header","total","content","console","log","catch","alert","table","forEach","item","indice","push","key","name","username","Exception","_this4","keyCode","_this5","_this6","buttonLabel","createTable","InputText_InputText","onClick","Auth","inputEmailHandle","inputPassHandle","inputUriHandle","inputHandleEnter","handleButtonClick","changeEmail","changePass","changeUri","requestAuth","doing","handleAuth","email","pass","uri","App","nImports","handleAuthDoing","dbCheck","handleChangeUri","handleEmailField","handlePassField","status","parseInt","data","FormData","append","body","responseJson","success","error","password","setInterval","Header_Header","SearchBox_SearchBox","Auth_Auth","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e169b181.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n      let n = \"\";\r\n      if(this.props.db == 1){\r\n        n = this.props.n;\r\n      }\r\n      let db = this.props.db;\r\n      let dbStatus = \"none\";\r\n      let dbStatusColor;\r\n      if(db === 0){\r\n        dbStatus = \"Not Ready\";\r\n        dbStatusColor = 'white';\r\n      }else if(db === 1){\r\n          dbStatus = \"Importing\";\r\n          dbStatusColor = 'white'\r\n      }else if(db === 2){\r\n          dbStatus = \"Ready\";\r\n          dbStatusColor = \"white\";\r\n      }else{\r\n        dbStatusColor = \"red\";\r\n          dbStatus = \"Unknown\";\r\n      }\r\n      const dbStatusStyle = {\r\n          color: dbStatusColor,\r\n          fontWeigth: 'bolder'\r\n      };\r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"header-logo\">\r\n            Teste PicPay BackEnd\r\n        </div>\r\n        <div className=\"header-info\">\r\n            ElasticSearch Status: <span style={dbStatusStyle}>{dbStatus}</span>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './InputText.css';\r\n\r\nexport default class InputText extends Component {\r\n    render() {\r\n        return (\r\n            <label htmlFor=\"inp\" className=\"it-inp\">\r\n                <input type={this.props.type} className=\"it-input\" id=\"inp\" value={this.props.value} onChange={this.props.handleInput} onKeyDown={this.props.handleEnter} placeholder=\"&nbsp;\" />\r\n                <span className=\"it-label\">{this.props.label}</span>\r\n                <span className=\"it-border\"></span>\r\n            </label>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './SearchBox.css';\r\nimport InputText from './InputText';\r\n\r\nexport default class SearchBox extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            field: '',\r\n            nResults: 0,\r\n            results: [],\r\n            pag: 1,\r\n            doingSearch: 0\r\n        }\r\n        this.handleField = this.handleField.bind(this);\r\n        this.handleButton = this.handleButton.bind(this);\r\n        this.handlePagButton = this.handlePagButton.bind(this);\r\n        this.handleInputEnter = this.handleInputEnter.bind(this);\r\n    }\r\n\r\n    handleField(event) {\r\n        this.setState({ field: event.target.value });\r\n    }\r\n\r\n    handleButton() {\r\n        this.setState({\r\n            pag: 1\r\n        }, () => {\r\n            this.search();\r\n        });\r\n    }\r\n\r\n    search() {\r\n        if (this.props.db == 0) {\r\n            alert(\"ES dont ready\");\r\n            return;\r\n        }\r\n        this.setState({\r\n            doingSearch: 1\r\n        }, () => {\r\n            let keyword = this.state.field;\r\n            let from = this.state.pag;\r\n            let requestUri = this.props.serverURI + \"users\";\r\n            if (keyword.length > 0) {\r\n                requestUri += \"?name=\" + keyword;\r\n                requestUri += \"&from=\" + --from * 15;\r\n            } else {\r\n                requestUri += \"?from=\" + --from * 15;\r\n            }\r\n            fetch(requestUri, {\r\n                crossDomain: true,\r\n                method: 'GET',\r\n                headers: { 'Content-type': 'application/json', 'Accept': 'application/json', 'Authorization': \"Bearer \" + this.props.token }\r\n            })\r\n                .then((response) => {\r\n                    return response.json()\r\n                })\r\n                .then((reponseJson) => {\r\n                    let nResults = reponseJson.header.total;\r\n                    let results = reponseJson.content;\r\n                    if (nResults === 0) {\r\n                        results = []\r\n                    }\r\n                    this.setState({\r\n                        nResults: nResults,\r\n                        results: results\r\n                    })\r\n                    console.log(this.state.results);\r\n                }\r\n                ).catch(() => {\r\n                    alert(\"Search Error\")\r\n                });\r\n        })\r\n        this.setState({\r\n            doingSearch: 0\r\n        })\r\n    }\r\n\r\n    createTable() {\r\n        let table = [];\r\n        try {\r\n            this.state.results.forEach(\r\n                (item, indice) => {\r\n                    table.push(\r\n                        <tr key={item.id}>\r\n                            <td>{item.id}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.username}</td>\r\n                        </tr>\r\n                    )\r\n                }\r\n            );\r\n        } catch (Exception) {\r\n\r\n        }\r\n        return table;\r\n    }\r\n\r\n    handleInputEnter(event) {\r\n        if (event.keyCode == 13) {\r\n            this.setState({\r\n                pag: 1\r\n            }, () => {\r\n                this.search();\r\n            })\r\n        }\r\n    }\r\n\r\n    handlePagButton(value) {\r\n        let pag = this.state.pag;\r\n        pag += value;\r\n        if (pag < 1) {\r\n            pag = 1;\r\n        }\r\n        if (this.state.nResults <= pag * 15) {\r\n            return;\r\n        }\r\n        if (value == -2) {\r\n            pag = 1;\r\n        }\r\n        if (value == 2) {\r\n            pag = 665;\r\n        }\r\n        this.setState({\r\n            pag: pag,\r\n        }, () => {\r\n            this.search();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let buttonLabel = \"Wait\";\r\n        let table = this.createTable();\r\n        if(this.state.doingSearch === 0){\r\n            buttonLabel = \"Search\";\r\n        }\r\n        return (\r\n            <div className=\"se\">\r\n                <div className=\"se-content\">\r\n                    <div className=\"se-input\">\r\n                        <InputText handleInput={this.handleField} type='text' value={this.state.field} handleEnter={this.handleInputEnter} label=\"Search\" />\r\n                        <button onClick={this.handleButton}>\r\n                            {buttonLabel}\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"table\">\r\n                        <table>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>Name</th>\r\n                                    <th>Username</th>\r\n                                </tr>\r\n                                {table}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"rodape\">\r\n                        Number of results: {this.state.nResults}\r\n                        <div className=\"pagination\">\r\n                            <button onClick={() => this.handlePagButton(-2)}>&lt;&lt;</button>\r\n                            <button onClick={() => this.handlePagButton(-1)}>&lt;</button>\r\n                            {this.state.pag}\r\n                            <button onClick={() => this.handlePagButton(1)}>&gt;</button>\r\n                            <button onClick={() => this.handlePagButton(2)}>&gt;&gt;</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './Auth.css';\r\nimport InputText from './InputText';\r\n\r\nexport default class Auth extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.inputEmailHandle = this.inputEmailHandle.bind(this);\r\n        this.inputPassHandle = this.inputPassHandle.bind(this);\r\n        this.inputUriHandle = this.inputUriHandle.bind(this);\r\n        this.inputHandleEnter = this.inputHandleEnter.bind(this);\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    }\r\n\r\n    inputEmailHandle(event){\r\n        this.props.changeEmail(event.target.value);\r\n    }\r\n\r\n    inputPassHandle(event){\r\n        this.props.changePass(event.target.value);\r\n    }\r\n\r\n    inputUriHandle(event){\r\n        this.props.changeUri(event.target.value);\r\n    }\r\n\r\n    inputHandleEnter(event){\r\n        if(event.keyCode == 13){\r\n            this.requestAuth();\r\n        }\r\n    }\r\n\r\n    handleButtonClick(){\r\n        this.requestAuth();\r\n    }\r\n\r\n    requestAuth(){\r\n        if(this.props.doing === 0)\r\n            this.props.handleAuth();\r\n    }\r\n    \r\n    render() {\r\n        let buttonLabel = \"Wait\"\r\n        if(this.props.doing === 0){\r\n            buttonLabel = \"Login\"\r\n        }\r\n        return (\r\n            <div className=\"auth-global\">\r\n                <div className=\"auth-container\">\r\n                    <div className=\"auth-inputContainer\">\r\n                        <InputText label=\"Email\" type='text' handleInput={this.inputEmailHandle} value={this.props.email} handleEnter={this.inputHandleEnter}/>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <InputText label=\"Password\" type=\"password\" handleInput={this.inputPassHandle} value={this.props.pass} handleEnter={this.inputHandleEnter}/>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <InputText label=\"REST API URL\" type='text' handleInput={this.inputUriHandle} value={this.props.uri} handleEnter={this.inputHandleEnter}/>\r\n                    </div>\r\n                    <button className=\"auth-button\" onClick={this.handleButtonClick}>{buttonLabel}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Headers from './Header'\nimport SearchBox from './SearchBox';\nimport Auth from './Auth';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      db: 8,\n      nImports: 0,\n      token: null,\n      serverURI: \"http://localhost:3100/\",\n      email: \"picpay@picpay.com\",\n      pass: \"admin\",\n      handleAuthDoing: 0\n    }\n    this.dbCheck = this.dbCheck.bind(this);\n    this.handleChangeUri = this.handleChangeUri.bind(this)\n    this.handleAuth = this.handleAuth.bind(this);\n    this.handleEmailField = this.handleEmailField.bind(this);\n    this.handlePassField = this.handlePassField.bind(this);\n  }\n\n  dbCheck() {\n    if (this.state.token == null) return;\n    let token = this.state.token;\n    fetch(this.state.serverURI + 'esstatus', {\n      crossDomain: true,\n      method: 'GET',\n      headers: { 'Content-type': 'application/json', 'Accept': 'application/json', 'Authorization': \"Bearer \" + token }\n    })\n      .then((response) => {\n        return response.json()\n      })\n      .then((reponseJson) => {\n        let status = parseInt(reponseJson.status);\n        let n = 0;\n        if (status == 1) {\n          n = reponseJson.n;\n        }\n        this.setState({\n          db: status,\n          nImports: n\n        });\n      }).catch(() => {\n        this.setState({\n          db: 8\n        });\n      }\n      )\n  }\n\n  handleAuth() {\n    this.setState({\n      handleAuthDoing: 1\n    }, () => {\n      let data = new FormData();\n      data.append(\"username\", this.state.email);\n      data.append(\"password\", this.state.pass);\n      fetch(this.state.serverURI + 'login', {\n        crossDomain: true,\n        method: 'POST',\n        headers: {},\n        body: data\n      })\n        .then((response) => {\n          return response.json();\n        }).then((responseJson) => {\n          if (typeof (responseJson.success) === 'undefined' || responseJson.success === null) {\n            let error = \"\";\n            if (typeof responseJson.username !== 'undefined') {\n              error += responseJson.username + \"\\n\";\n            }\n            if (typeof (responseJson.password) !== 'undefined') {\n              error += responseJson.password;\n            }\n            alert(error);\n            return;\n          }\n          let token = responseJson.success.token;\n          this.setState({\n            token: token\n          })\n        }).catch((error) => {\n          alert(error);\n        })\n    });\n    this.setState({\n      handleAuthDoing: 0\n    })\n  }\n\n  handleEmailField(email) {\n    this.setState({\n      email: email\n    })\n  }\n\n  handlePassField(pass) {\n    this.setState({\n      pass: pass\n    })\n  }\n\n  componentDidMount() {\n    var db = setInterval((event) => {\n      this.dbCheck();\n    }, 3000);\n  }\n\n  handleChangeUri(uri) {\n    this.setState({\n      serverURI: uri\n    })\n  }\n\n  render() {\n    let renderObject\n    if (this.state.token) {\n      renderObject = <section className=\"app\">\n        <Headers db={this.state.db} n={this.state.nImports} />\n        <SearchBox db={this.state.db} token={this.state.token} serverURI={this.state.serverURI} />\n      </section>\n    } else {\n      renderObject = <Auth doing={this.state.handleAuthDoing} handleAuth={this.handleAuth} email={this.state.email} pass={this.state.pass} uri={this.state.serverURI} changeEmail={this.handleEmailField} changePass={this.handlePassField} changeUri={this.handleChangeUri} />;\n    }\n    return (\n      renderObject\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}